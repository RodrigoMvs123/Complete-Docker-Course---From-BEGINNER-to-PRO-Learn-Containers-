docker-swarm.yml
version: ‘3.7’
services:
    client-react-nginx:
     image: sidpalas/devops-directive-docker-course-client-react-nginx:5
     deploy:
        mode: replicated
        replicas: 1
        update_config:
        order: start-first
      init: true
    networks:
      - frontend
    ports:
      - 80:8080
   healthcheck:
      test [ “CMD”, “curl”, “-t”, “http://localhost:8080/ping/”
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s 
  api-node:
    labels:
      shipyard.route: '/api/node/'
      shipyard.route.rewrite: true
    image: sidpalas/devops-directive-docker-course-api-node:9
   deploy:
        mode: replicated
        replicas: 1
        update_config:
        order: start-first
    init: true
    depends_on:
      - db
    environment:
      - DATABASE_URL_FILE=/run/secrets/database-url
   secrets:
database-url
    networks:
      - frontend
      - backend
    ports:
      - 3000:3000
  healthcheck:
      test [ “CMD”, “node”, “/usr/src/app/healthcheck.js”
      timeout: 5s
      retries: 3
      start_period: 10s 
  api-golang: 
    image: sidpalas/devops-directive-docker-course-api-golang:8
   deploy:
        mode: replicated
        replicas: 2
        update_config:
        order: start-first
    init: true
    depends_on:
      - db
    environment:
      - DATABASE_URL_FILE=/run/secrets/database-url
   secrets:
database-url
    networks:
      - frontend
      - backend
    ports:
      - 8080:8080
  healthcheck:
      test [ “CMD”, “/healthcheck” ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s 
  db:
    image: postgres:15.1-alpine
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres-passwd
    secrets:
 postgres-passwd
    networks:
      - backend
    ports:
      - 5432:5432
volumes:
  pgdata:
networks:
  frontend:
  backend:
secrets: 
   database-url:
      external: true
   postgres-passwd: 
      external: true
